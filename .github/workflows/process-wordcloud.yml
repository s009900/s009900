name: Process Word Cloud Submission

on:
  issues:
    types: [opened, edited, labeled]
  workflow_dispatch:

jobs:
  process-word:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r .github/wordcloud/requirements.txt
    
    - name: Process new word
      id: process
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Log the event for debugging
          console.log('Event payload:', JSON.stringify(context.payload, null, 2));
          
          // Get the latest issue data
          const { data: issue } = await github.rest.issues.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          // Log the issue data
          console.log('Issue data:', JSON.stringify(issue, null, 2));
          
          // Check if this is a word cloud submission
          const isWordCloudIssue = issue.labels && issue.labels.some(label => 
            typeof label === 'string' ? label === 'word-cloud' : label.name === 'word-cloud'
          );
          
          if (!isWordCloudIssue) {
            console.log('Not a word cloud issue, skipping...');
            return 'Skipped: Not a word cloud issue';
          }
          
          // Extract word from the form data
          const body = context.payload.issue.body;
          console.log('Issue body:', body);
          
          // Get the word from the form input
          // The form data is in the format: **<label>**\n\n<value>\n\n
          let word = null;
          const wordSection = body.split('**Word to Add**')[1];
          if (wordSection) {
            // Get the first line after the label (skipping any empty lines)
            const lines = wordSection.split('\n').map(line => line.trim()).filter(line => line);
            word = lines[0];
          }
          
          console.log('Extracted word:', word);
          
          if (!word) {
            console.log('No word found in the issue body');
            return 'Error: No word found in the issue body';
          }
          
          const newWord = word.trim();
          console.log('Processing word:', newWord);
          
          // Load existing words
          let words = [];
          const wordsPath = '.github/wordcloud/words.json';
          try {
            console.log('Reading words from:', wordsPath);
            const wordsFile = fs.readFileSync(wordsPath, 'utf8');
            words = JSON.parse(wordsFile);
            console.log('Successfully parsed words.json');
            console.log('Current words:', JSON.stringify(words, null, 2));
          } catch (e) {
            console.log('Error reading/parsing words.json, using empty array. Error:', e.message);
            words = [];
          }
          
          // Add new word
          words.push(newWord);
          console.log('Updated words:', JSON.stringify(words, null, 2));
          
          try {
            // Save updated words
            const wordsContent = JSON.stringify(words, null, 2);
            console.log('Saving words to file. Content length:', wordsContent.length);
            fs.writeFileSync(wordsPath, wordsContent);
            
            // Verify the file was written
            const verifyContent = fs.readFileSync(wordsPath, 'utf8');
            console.log('Successfully wrote to words.json. File content:', verifyContent);
            
            // Generate word cloud
            const { execSync } = require('child_process');
            console.log('Generating word cloud...');
            execSync('python .github/wordcloud/generate_wordcloud.py');
            
            // Commit changes
            console.log('Committing changes...');
            try {
              // Configure git
              execSync('git config --global user.name "GitHub Action"');
              execSync('git config --global user.email "action@github.com"');
              
              // Add files with force flag to ensure they're staged
              execSync('git add --force .github/wordcloud/words.json');
              
              // Check if the file is actually staged
              const stagedFiles = execSync('git diff --name-only --cached').toString().trim();
              console.log('Staged files:', stagedFiles);
              
              // Check if there are any changes to commit
              const status = execSync('git status --porcelain .github/wordcloud/words.json').toString().trim();
              console.log('Git status for words.json:', status);
              
              // Always try to commit, even if status doesn't show changes
              try {
                execSync('git commit -m "chore: update word cloud with new word"');
                console.log('Successfully committed changes');
                
                // Try to push
                try {
                  execSync('git push');
                  console.log('Successfully pushed changes');
                } catch (pushError) {
                  console.error('Error pushing changes:', pushError.message);
                  console.log('Attempting to pull and retry push...');
                  execSync('git pull --rebase');
                  execSync('git push');
                  console.log('Successfully pushed after pull');
                }
              } catch (commitError) {
                console.log('No changes to commit or commit failed:', commitError.message);
              }
              
              // Generate and add word cloud
              console.log('Generating word cloud...');
              execSync('python .github/wordcloud/generate_wordcloud.py');
              execSync('git add assets/wordcloud.png');
              
              // Check if word cloud was generated and added
              const wcStatus = execSync('git status --porcelain assets/wordcloud.png').toString().trim();
              if (wcStatus) {
                execSync('git commit -m "chore: update word cloud image"');
                execSync('git push');
                console.log('Successfully updated word cloud image');
              } else {
                console.log('No changes to word cloud image');
              }
              
            } catch (error) {
              console.error('Error during git operations:', error);
              throw error;
            }
            
            console.log('Successfully updated word cloud');
            // Set the output for the next step
            core.setOutput('result', `Thanks for adding "${newWord}" to my word cloud! ðŸŽ‰`);
            return `Thanks for adding "${newWord}" to my word cloud! ðŸŽ‰`;
          } catch (error) {
            console.error('Error updating word cloud:', error);
            return `Error updating word cloud: ${error.message}`;
          }
    
    - name: Close the issue
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const result = '${{ steps.process.outputs.result }}';
          console.log('Step output:', result);
          
          // Only proceed if we have a valid result
          if (result && !result.includes('Error') && !result.includes('Skipped')) {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: result
            });
            
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              state_reason: 'completed'
            });
          }
